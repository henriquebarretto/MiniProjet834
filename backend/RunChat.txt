
# Backend {
    1. cd backend
    2. Démarrez le backend avec : uvicorn app.main:app --reload
}

# Frontend {
    1. Servez le frontend avec un simple serveur statique : python3 -m http.server 8080
    2. Accès dans le navigateur : http://localhost:8080
}

# Iniciar replicaset{

    *Abrir 4 terminais.
    
    Iniciar os três mongod com as configurações do replica set:
    t1: mongod --port 27017 --dbpath "/Users/henriquebarretto/Library/CloudStorage/OneDrive-Pessoal/ECOMP SENAI CIMATEC/AAA Polytech Annecy/S8/INFO 834 - Bases de données distribuées/MiniProjet834/dbs/db3" --replSet rs0 --bind_ip 127.0.0.1
    t2: mongod --port 27018 --dbpath "/Users/henriquebarretto/Library/CloudStorage/OneDrive-Pessoal/ECOMP SENAI CIMATEC/AAA Polytech Annecy/S8/INFO 834 - Bases de données distribuées/MiniProjet834/dbs/db3" --replSet rs0 --bind_ip 127.0.0.1
    t3: mongod --port 27019 --dbpath "/Users/henriquebarretto/Library/CloudStorage/OneDrive-Pessoal/ECOMP SENAI CIMATEC/AAA Polytech Annecy/S8/INFO 834 - Bases de données distribuées/MiniProjet834/dbs/db3" --replSet rs0 --bind_ip 127.0.0.1

    Conectar no mongosh na porta 27017 (terminal n4):
        mongosh --port 27017

    Inicializar o replica set (terminal n4):
        rs.initiate()

    Adicionar os outros membros (terminal n4):
        rs.add("localhost:27018")
        rs.add("localhost:27019")

    Verificar o status (terminal n4):
        rs.status()
}

# Test replicaset {
    - Teste de tolerância a falhas
    
    Desligue o nó primário (27017):
        mongo --port 27017
        db.adminCommand({ shutdown: 1 })
    
    - Verifique se um dos nós secundários se tornou o primário:
        mongosh --port 27018
        rs.isMaster()
}


obs:
Para verificar qual processo (se houver) está usando alguma porta:
- lsof -i :27017
Para encerrar (substituir PID pelo número):
- kill -9 PID